---
# Playbook to validate infrastructure state using Goss

- name: Validate Infrastructure with Goss
  hosts: all
  become: true # Goss often needs root for some checks (services, ports)
  vars:
    # Define path where Goss binary should be installed on targets
    goss_path: /usr/local/bin/goss
    # Define URL to download Goss from (check latest version)
    goss_url: "https://github.com/goss-org/goss/releases/download/v0.4.10/goss-linux-amd64"
    goss_sha256sum: "1dd7963a7404d5c15d030a4748d5156a135e159600d6131178c7a9c738b09ff3" # SHA for v0.4.10 amd64
    # Path to the gossfile within the role or repo structure (relative to playbook)
    goss_file: "{{ playbook_dir }}/tests/goss/goss.yml"

  tasks:
    - name: Check if Goss binary exists
      ansible.builtin.stat:
        path: "{{ goss_path }}"
      register: goss_binary_stat

    - name: Download and install Goss binary if not present
      when: not goss_binary_stat.stat.exists
      block:
        - name: Download Goss binary
          ansible.builtin.get_url:
            url: "{{ goss_url }}"
            dest: "{{ goss_path }}"
            mode: '0755'
            checksum: "sha256:{{ goss_sha256sum }}"
          register: download_goss
          until: download_goss is succeeded
          retries: 3
          delay: 2

    - name: Run Goss validation using local gossfile
      community.general.goss:
        path: "{{ goss_file }}" # Path to the test file on the control node
        format: documentation # Output format (e.g., json, documentation)
        validate: true # Run validation checks
      register: goss_results
      # Optional: Fail playbook if tests fail
      # failed_when: goss_results.failed_count | int > 0

    - name: Display Goss results summary
      ansible.builtin.debug:
        msg: "Goss Validation Summary: {{ goss_results.summary_line }}"

