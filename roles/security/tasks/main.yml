# /opt/architect_configs/roles/security/tasks/main.yml
---
# Security hardening tasks using templates and refined rules

# --- SSHD Hardening (using Template) ---
- name: Deploy hardened sshd_config from template
  ansible.builtin.template:
    src: sshd_config.j2 # Template file in roles/security/templates/
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0600'
    validate: 'sshd -t -f %s' # Validate syntax before applying
  notify: Restart sshd # Trigger handler if template changes result in file change
  tags: [security, sshd]

# --- UFW Management ---
- name: Ensure ufw package is installed
  ansible.builtin.apt:
    name: ufw
    state: present
  tags: [security, firewall, ufw]

- name: Set UFW logging state
  community.general.ufw:
    logging: 'on' # Options: off, low, medium, high, full
  tags: [security, firewall, ufw]

- name: Set UFW default policies (Deny Incoming)
  community.general.ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  loop:
    - { direction: incoming, policy: deny }
    - { direction: outgoing, policy: allow }
    - { direction: routed, policy: deny }
  tags: [security, firewall, ufw]
  notify: Reload ufw # Trigger handler

# -- UFW Allow Rules --
# Note: Manage these dynamically with variables in group_vars/host_vars

- name: Allow SSH connections from specified sources
  community.general.ufw:
    rule: allow
    port: "{{ security_ssh_port | default(22) }}"
    proto: tcp
    src: "{{ item }}"
  loop: "{{ security_ufw_allow_ssh_sources | default(['any']) }}" # Define 'security_ufw_allow_ssh_sources' list in vars. Default 'any' is INSECURE.
  tags: [security, firewall, ufw, ssh]
  notify: Reload ufw

# Example: Allow web ports only on server group
- name: Allow HTTP/HTTPS on server group
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
    # Note: No 'src' means allow from 'any' by default for these ports on the server
  loop: [ '80', '443' ]
  when: "'server' in group_names" # Only run on hosts in 'server' group defined in inventory
  notify: Reload ufw
  tags: [security, firewall, ufw, web]

# Example: Allow Grafana/Loki only on server group from specific internal source
- name: Allow Monitoring ports on server group from specified sources
  community.general.ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
    src: "{{ item.source }}"
  loop:
    # Allow from localhost for server itself
    - { port: '3000', source: '127.0.0.1' } # Grafana
    - { port: '3100', source: '127.0.0.1' } # Loki
    # Allow from specific subnet defined in vars
    - { port: '3000', source: "{{ monitoring_allowed_sources | default('192.168.0.0/24') }}" } # Grafana
    - { port: '3100', source: "{{ monitoring_allowed_sources | default('192.168.0.0/24') }}" } # Loki
  when: "'server' in group_names"
  notify: Reload ufw
  tags: [security, firewall, ufw, monitoring]

# Add rules to explicitly DENY everything not allowed if needed, though default deny helps.

- name: Ensure ufw is enabled and running
  community.general.ufw:
    state: enabled
  tags: [security, firewall, ufw]


# --- Fail2Ban ---
- name: Ensure fail2ban package is installed
  ansible.builtin.apt:
    name: fail2ban
    state: present
  when: security_fail2ban_enabled | default(false) # Use variable from group_vars/all.yml
  tags: [security, fail2ban]

- name: Deploy fail2ban jail.local configuration from template
  ansible.builtin.template:
    src: jail.local.j2 # Template file in roles/security/templates/
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: '0644'
  when: security_fail2ban_enabled | default(false)
  notify: Restart fail2ban # Handler needed
  tags: [security, fail2ban]

- name: Ensure fail2ban service is enabled and running
  ansible.builtin.service:
    name: fail2ban
    state: started
    enabled: yes
  when: security_fail2ban_enabled | default(false)
  tags: [security, fail2ban]

