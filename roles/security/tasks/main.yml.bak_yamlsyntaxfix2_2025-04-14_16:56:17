---
# Tasks for security role - v1.5 Enhanced Forceful UFW Reset
- name: Deploy hardened sshd_config from template
  ansible.builtin.template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0600'
  notify: Restart sshd
  tags: [security, ssh]

- name: Ensure ufw package is installed
  ansible.builtin.apt:
    name: ufw
    state: present
  tags: [security, ufw]

# --- BEGIN ENHANCED FORCEFUL UFW RESET ---
- name: Find existing UFW user rule backups
  ansible.builtin.find:
    paths:
      - /etc/ufw
      - /var/lib/ufw
    patterns:
      - 'user.rules.*'
      - 'user6.rules.*'
    file_type: file
    recurse: no # Do not go into subdirs
  register: ufw_backups_found
  become: true
  tags: [security, ufw]

- name: WARN about deleting existing UFW backups
  ansible.builtin.debug:
    msg: "WARNING: The following UFW backup files will be DELETED before reset: {{ ufw_backups_found.files | map(attribute='path') | list }}"
  when: ufw_backups_found.files | length > 0
  tags: [security, ufw]

- name: Forcefully remove existing UFW user rule backups
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ ufw_backups_found.files }}"
  when: ufw_backups_found.files | length > 0
  become: true
  tags: [security, ufw]

- name: Reset UFW to installation defaults (Forceful)
  ansible.builtin.command: ufw --force reset
  changed_when: true # Assume reset always changes state
  notify: Reload ufw
  tags: [security, ufw]

- name: Verify UFW status after reset (informational)
  ansible.builtin.command: ufw status verbose
  register: ufw_status_after_reset
  changed_when: false
  become: true
  tags: [security, ufw]

- name: Display UFW status after reset
  ansible.builtin.debug:
    msg: "{{ ufw_status_after_reset.stdout_lines }}"
  tags: [security, ufw]
# --- END ENHANCED FORCEFUL UFW RESET ---

# ... (rest of security tasks remain the same as in response #109) ...
# Set UFW logging state, default policies, allow rules, enable, fail2ban tasks etc.

- name: Set UFW logging state
  community.general.ufw:
    logging: 'on'
  notify: Reload ufw
  tags: [security, ufw]

- name: Set UFW default policies (Deny Incoming)
  community.general.ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  loop:
    - { direction: incoming, policy: deny }
    - { direction: outgoing, policy: allow }
    - { direction: routed, policy: deny }
  notify: Reload ufw
  tags: [security, ufw]

- name: Apply Server-specific UFW allow rules
  community.general.ufw:
    rule: "{{ item.rule | default('allow') }}"
    direction: "{{ item.direction | default('in') }}"
    from_ip: "{{ item.src | default('any') }}"
    to_ip: "{{ item.dest | default('any') }}"
    port: "{{ item.port | default(omit) }}"
    proto: "{{ item.proto | default('any') }}"
    comment: "{{ item.comment | default(omit) }}"
  loop: "{{ server_ufw_allow_rules | default([]) }}"
  when: inventory_hostname in groups['server']
  notify: Reload ufw
  tags: [security, ufw]

- name: Apply Client-specific UFW allow rules
  community.general.ufw:
    rule: "{{ item.rule | default('allow') }}"
    direction: "{{ item.direction | default('in') }}"
    from_ip: "{{ item.src | default('any') }}"
    to_ip: "{{ item.dest | default('any') }}"
    port: "{{ item.port | default(omit) }}"
    proto: "{{ item.proto | default('any') }}"
    comment: "{{ item.comment | default(omit) }}"
  loop: "{{ client_ufw_allow_rules | default([]) }}" # Define this var for clients
  when: inventory_hostname in groups['clients']
  notify: Reload ufw
  tags: [security, ufw]

- name: Ensure ufw is enabled and running
  community.general.ufw:
    state: enabled
  tags: [security, ufw]

# --- Fail2ban Section ---
- name: Ensure fail2ban package is installed
  ansible.builtin.apt:
    name: fail2ban
    state: present
  when: security_fail2ban_enabled | default(false)
  tags: [security, fail2ban]

- name: Deploy fail2ban jail.local configuration from template
  ansible.builtin.template:
    src: jail.local.j2 # Assumes template exists
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: '0644'
  when: security_fail2ban_enabled | default(false)
  notify: Restart fail2ban
  tags: [security, fail2ban]

- name: Ensure fail2ban service is enabled and running
  ansible.builtin.service:
    name: fail2ban
    state: started
    enabled: yes
  when: security_fail2ban_enabled | default(false)
  tags: [security, fail2ban]

