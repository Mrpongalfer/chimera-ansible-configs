# /opt/architect_configs/playbooks/setup_client_for_mgmt.yml
---
- name: Configure Client PC for Ansible Management of Server
  hosts: clients # Targets hosts in the [clients] group of your inventory
  remote_user: pong # Specify the user to run tasks as on the client (must match inventory ansible_user)
  become: yes # Most tasks require privilege escalation on the client
  gather_facts: yes

  # Define variables specific to this playbook's execution context
  # Ideally, move these to inventory group_vars/host_vars later
  vars:
    client_ansible_user: "pong" # Explicitly setting based on your confirmation
    client_config_repo_path: "/home/{{ client_ansible_user }}/chimera-ansible-configs" # Clone destination on client
    client_ansible_key_path: "/home/{{ client_ansible_user }}/.ssh/ansible_server_key" # Key client uses TO connect TO server

    # Server details - needed for inventory generation on client & key auth back to server
    server_ip: "192.168.0.95" # Assumes static IP, consider hostname if DNS/hosts setup
    server_admin_user: "aiseed" # User Ansible connects *as* when client manages server

    # Git repo details (needed for client clone) - retrieving from localhost if possible
    # If these hostvars don't work, uncomment and define them directly below
    config_repo_url: "{{ hostvars['localhost']['CONFIG_REPO_URL'] | default('https://github.com/Mrpongalfer/chimera-ansible-configs') }}"
    config_repo_branch: "{{ hostvars['localhost']['CONFIG_REPO_BRANCH'] | default('main') }}"
    config_repo_url: "https://github.com/Mrpongalfer/chimera-ansible-configs" # Fallback if hostvars fails
    config_repo_branch: "main" # Fallback if hostvars fails

  tasks:
    - name: Update apt cache and ensure necessary packages are installed on client
      ansible.builtin.apt:
        name:
          - ansible-core
          - git
          - python3-pip
          - python3-venv # Good practice for managing python tools/dependencies
        state: present
        update_cache: yes
      register: apt_result
      retries: 3
      until: apt_result is success
      tags: [packages, setup]

    - name: Ensure parent directory for git repo exists on client
      ansible.builtin.file:
        path: "{{ client_config_repo_path | dirname }}" # e.g., /home/pong
        state: directory
        owner: "{{ client_ansible_user }}"
        group: "{{ client_ansible_user }}" # Assume group name matches user name
        mode: '0755'
      # Run this without become if possible, depends on initial permissions
      # become: no # Let's try without become first for user's home dir

    - name: Ensure configuration repository is cloned on client
      ansible.builtin.git:
        repo: "{{ config_repo_url }}"
        dest: "{{ client_config_repo_path }}"
        version: "{{ config_repo_branch }}"
        accept_hostkey: yes # More secure: manage known_hosts via Ansible module
      become: yes # Requires become to potentially write if run initially as different user, but we set remote_user=pong
      become_user: "{{ client_ansible_user }}" # Clone as the target user
      tags: [git, setup]

    - name: Generate SSH key pair on client for Ansible server management
      ansible.builtin.openssh_keypair:
        path: "{{ client_ansible_key_path }}"
        type: ed25519
        state: present
        owner: "{{ client_ansible_user }}"
        group: "{{ client_ansible_user }}"
        mode: '0600'
      become: yes # Requires become to ensure correct owner/perms in ~/.ssh
      become_user: "{{ client_ansible_user }}"
      register: client_ssh_key # We don't strictly need to register this anymore
      tags: [sshkey, setup]

    - name: Read client's Ansible public key content
      ansible.builtin.slurp:
        src: "{{ client_ansible_key_path }}.pub"
      register: client_public_key_b64 # Registers base64 encoded key content
      become: yes # May need become to read file depending on initial state
      become_user: "{{ client_ansible_user }}"
      tags: [sshkey, setup]

    - name: Ensure inventory directory exists on client
      ansible.builtin.file:
        path: "{{ client_config_repo_path }}/inventory"
        state: directory
        owner: "{{ client_ansible_user }}"
        group: "{{ client_ansible_user }}"
        mode: '0755'
      become: yes # Run as target user
      become_user: "{{ client_ansible_user }}"
      tags: [inventory, setup]

    - name: Create basic inventory file on client for managing server
      ansible.builtin.copy:
        dest: "{{ client_config_repo_path }}/inventory/hosts"
        owner: "{{ client_ansible_user }}"
        group: "{{ client_ansible_user }}"
        mode: '0644'
        content: |
          # Generated by setup_client_for_mgmt.yml playbook
          [server]
          {{ server_ip }} ansible_user={{ server_admin_user }} ansible_private_key_file={{ client_ansible_key_path }} ansible_become_user=root ansible_become_method=sudo

          [clients]
          # Add other clients here if this client needs to manage them too
      become: yes # Run as target user
      become_user: "{{ client_ansible_user }}"
      tags: [inventory, setup]

    # --- Key Authorization back to Server ---
    - name: Authorize Client's Ansible public key on Server
      ansible.posix.authorized_key:
        user: "{{ server_admin_user }}" # User on server (aiseed)
        key: "{{ client_public_key_b64['content'] | b64decode }}" # Decode base64 content from slurp
        path: "/home/{{ server_admin_user }}/.ssh/authorized_keys" # Explicit path on server
        state: present
        manage_dir: yes # Let module manage .ssh dir permissions if needed
      delegate_to: localhost # <<< Executes this task ON the server running the playbook
      become: no # Run as the user executing ansible-playbook on the server (aiseed)
      tags: [authkey, setup]

    - name: Print success message for client setup
      ansible.builtin.debug:
        msg: "Client {{ inventory_hostname }} configured for Ansible. Key authorized on server {{ server_ip }}. Inventory created at {{ client_config_repo_path }}/inventory/hosts."
      tags: [setup]
